export const dynamic = "force-dynamic";

import Metric from "../../../../components/Shared/Metric" ;
import { Sparkles,Eye,Clock,MessageCircle} from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import { auth } from '@clerk/nextjs/server';
import Votes from "../../../../components/Shared/Votes";
import ParseHTML from "../../../../components/Shared/ParseHTML";
import { formatAndDivideNumber, getTimestamp } from '../../../../../lib/utils';
import { getQuestionById } from "../../../../../lib/actions/question.action";
import { getUserById } from "../../../../../lib/actions/user.action";


interface QuestionDetailPageProps {
  params: {
    id: string;
  };
}

const QuestionDetailPage = async ({ params }: QuestionDetailPageProps) => {
  try {

  const { userId: clerkId } = await auth();

  let mongoUser;

  if(clerkId) {
    mongoUser = await getUserById({ userId: clerkId })
  }
    const paramsId = await params.id;
    const question = await getQuestionById({ questionId: paramsId });

    if (!question) throw new Error("Question not found");


    return (
      <section className="w-full h-[calc(100vh-120px)] mt-18 overflow-y-auto scrollbar-hidden max-w-5xl mx-auto px-4 pt-6 pb-10 text-black dark:text-white">
        <div className="w-full flex justify-end">
            <Votes 
              type="Question"
              itemId={JSON.stringify(question?._id)}
              userId={JSON.stringify(mongoUser?._id)}
              upvotes={question?.upvotes?.length}
              hasupVoted={question?.upvotes?.includes(mongoUser?._id)}
              downvotes={question?.downvotes?.length}
              hasdownVoted={question?.downvotes?.includes(mongoUser?._id)}
              hasSaved={mongoUser?.saved?.includes(question?._id)}
            />
          </div>
        <div className="mt-4 flex  items-center gap-4">
          <Link href={`/profile/${question?.author?.clerkId}`}>
            <Image
              src={question.author?.image || "/default-avatar.png"}
              alt={question.author?.name || "User"}
              width={40}
              height={40}
              className="rounded-full border-2 border-orange-400"
            />
          </Link>
          <div>
            <p className="font-semibold dark:text-zinc-100 text-zinc-900 text-regular">
              {question.author?.name}
            </p>
            {question.author?.username && (
              <p className="text-xs">@{question.author.username}</p>
            )}
          </div>
        </div>

        {/* Title */}
        <h1 className="mt-6 text-5xl md:text-4xl font-bold leading-snug break-words text-zinc-800 dark:text-zinc-100">
          {question.title}
        </h1>

        <div className="mb-8 mt-5 flex items-center justify-around flex-wrap gap-6">
          <Metric 
            icon={<Clock />}
            alt="clock icon"
            value={` asked ${getTimestamp(question?.createdAt)}`}
            title=" Asked"
            textStyles="text-regular text-orange-700 dark:text-orange-500"
          />
          <Metric 
            icon={<MessageCircle />}
            alt="message"
            value={formatAndDivideNumber(question?.answers?.length)}
            title=" Answers"
            textStyles="text-regular text-orange-700 dark:text-orange-500"
          />
          <Metric 
            icon={<Eye />}
            alt="View"
            value={formatAndDivideNumber(question?.views)}
            title=" Views"
            textStyles="text-regular text-orange-700 dark:text-orange-500"
          />
      </div>

<div
              key={que._id}
              className={`w-full rounded-xl cursor-pointer border p-4 shadow-sm transition-all duration-200 hover:shadow-lg
                ${
                  isDark
                    ? "bg-zinc-950 border-zinc-700 shadow-lg shadow-zinc-800"
                    : "bg-white border-zinc-300 shadow-md shadow-zinc-400"
                }
              `}
            >
              {/* Title */}
              
              <Link href={`/question/${que._id}`}>
                <h2
                className={`text-base sm:text-lg hover:underline font-semibold line-clamp-2 break-words
                  ${isDark ? "text-zinc-100 hover:text-blue-300" : "text-zinc-800 hover:text-blue-700"}
                `}
              >
                {que.title}
              </h2>
              </Link>

              {/* Tags */}
              <div className="mt-3 flex flex-wrap gap-2">
                {que.tags.map((tag) => (
                  <span
                    key={tag._id}
                    title={tag.name}
                    className={`rounded-md cursor-pointer px-2 py-1 text-xs font-mono
                      ${
                        isDark
                          ? "bg-zinc-700 text-white hover:bg-zinc-600 transition-all"
                          : "bg-zinc-200 text-zinc-950 hover:bg-zinc-300 transition-all "
                      }
                    `}
                  >
                    {tag.name}
                  </span>
                ))}
              </div>

              {/* Meta Info */}
              <div
                className={`mt-4 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 text-sm
                  ${isDark ? "text-zinc-400" : "text-zinc-500"}
                `}
              >
                {/* User */}
                <div className="flex items-center gap-3">
                  <Image
                    src={que.user.image}
                    alt={que.user.name}
                    width={24}
                    height={24}
                    className={`h-8 w-8 rounded-full object-cover ${isDark ? "border-1 border-orange-700" : "border-2 border-orange-500" } `}
                  />
                  <span className="text-sm font-medium">{que.user.name}</span>
                </div>

                {/* Stats */}
                <div className="flex flex-wrap items-center gap-4 text-xs sm:text-sm">
                  {/* Upvotes */}
                  <span
                    title="Upvote"
                    className={`flex items-center gap-1 ${
                      isDark ? "text-white" : "text-red-600"
                    }`}
                  >
                    <svg
                      className="w-4 h-4"
                      fill="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                      stroke="none"
                    >
                      <path d="M12.781 2.375c-.381-.475-1.181-.475-1.562 0l-8 10A1.001 1.001 0 0 0 4 14h4v7a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-7h4a1.001 1.001 0 0 0 .781-1.625l-8-10zM15 12h-1v8h-4v-8H6.081L12 4.601 17.919 12H15z" />
                    </svg>
                    {que.upvotes}
                  </span>

                  {/* Comments */}
                  <span
                    title="Answer"
                    className={`flex items-center gap-1 ${
                      isDark ? "text-zinc-100" : "text-zinc-700"
                    }`}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth={1.5}
                      stroke="currentColor"
                      className="size-4.5"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z"
                      />
                    </svg>
                    {que.answers}
                  </span>

                  {/* Views */}
                  <span
                    title="Views"
                    className={`flex items-center gap-1 ${
                      isDark ? "text-zinc-100" : "text-zinc-700"
                    }`}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="w-4 h-4"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth={1.5}
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"
                      />
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                      />
                    </svg>
                    {que.views}
                  </span>

                  {/* Like */}
                  {/* If you want to show likes, you can add a likes property to mappedQuestions */}
                  {/* <span
                    title="Like"
                    className={`flex items-center gap-1 ${
                      isDark ? "text-zinc-100" : "text-zinc-700"
                    }`}
                  >
                    <svg ... />
                    {que.likes}
                  </span> */}

                  {/* Date */}
                  <span
                    title="Created At"
                    className={`text-xs spacing-tighter font-semibold select-none ${
                      isDark ? "text-zinc-300" : "text-zinc-700"
                    }`}
                  >
                    {formatDate(que.createdAt)}
                  </span>
                </div>
              </div>
            </div>

        </div>

        {/* Answer Section */}
        <section className="mt-14 border-t pt-10">
          <h2 className="text-2xl font-semibold mb-6">Your Answer</h2>

          {/* Generate AI Button */}
          <div className="flex justify-end mb-4">
            <button className="flex items-center cursor-pointer gap-2 bg-orange-100 dark:bg-orange-900/30 text-orange-600 hover:text-orange-800 dark:text-orange-300 hover:bg-orange-200 dark:hover:bg-orange-800/50 px-4 py-2 rounded-md font-medium shadow-sm transition-all duration-200">
              <Sparkles className="w-5 h-5 text-orange-500" />
              Generate Answer with AI
            </button>
          </div>

          {/* Answer Input */}
          <form className="space-y-4">
            <textarea
              placeholder="Write your answer here..."
              className="w-full min-h-[170px] p-4 border border-zinc-300 placeholder:font-mono placeholder:text-regular dark:border-zinc-800 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 bg-white dark:bg-zinc-800 text-zinc-900 dark:text-white resize-none"
            />

            <button
              type="submit"
              className="px-6 py-2 bg-orange-500 text-white font-medium rounded-md hover:bg-orange-600 transition"
            >
              Post Your Answer
            </button>
          </form>
        </section>
      </section>
    );
  } catch (err) {
    return (
      <div className="text-center py-24 px-4">
        <h1 className="text-4xl font-bold text-red-600 mb-4">
          Question Not Found
        </h1>
        <p className="text-zinc-600 dark:text-zinc-400 mb-6">
          The question you are looking for does not exist or has been removed.
        </p>
        <div className="flex justify-center gap-4">
          <Link
            href="/"
            className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600"
          >
            Go Home
          </Link>
          <Link
            href="/ask-question"
            className="px-4 py-2 border border-orange-500 text-orange-500 rounded hover:bg-orange-50 dark:hover:bg-orange-900/20"
          >
            Ask a Question
          </Link>
        </div>
      </div>
    );
  }
};

export default QuestionDetailPage;
